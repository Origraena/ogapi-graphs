package moca.graphs;

import moca.operators.OperatorPlus1T;

import moca.lists.LinkedList;
import moca.lists.Lifo;
import moca.lists.Fifo;

import moca.graphs.vertices.Vertex;
import moca.graphs.vertices.VertexCollection;
import moca.graphs.vertices.VertexBinaryFunction;
import moca.graphs.vertices.ParentFunction;
import moca.graphs.edges.Edge;
import moca.graphs.edges.NeighbourEdge;
import moca.graphs.edges.EdgeCollection;
import moca.graphs.edges.IllegalEdgeException;


import java.util.Collection;
import java.lang.Iterable;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.lang.UnsupportedOperationException;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Comparator;


public class AbstractGraph<V,E> implements Iterable<V> {

	/* CONSTRUCTORS */

	public AbstractGraph(VertexCollection<V> vertices) {
		_vertices = vertices;
	}

	protected AbstractGraph() {
		_vertices = null;
	}

	public void clear() {
		_vertices.clear();
	}
	
	/* VERTICES */

	public int getNbVertices() {
		return _vertices.size();
	}

	public Vertex<V> getVertex(int id) throws NoSuchElementException {
		return _vertices.get(id);
	}

	public void removeVertex(int id) {
		_vertices.remove(id);
	}

	public V get(int id) throws NoSuchElementException {
		return getVertex(id).getValue();
	}

	public void set(int id, V value) throws NoSuchElementException {
		getVertex(id).setValue(value);
	}

	public void add(V value) {
		addVertex(value);
	}

	public void addVertex(V value) {
		Vertex<V> v = new Vertex<V>(value);
		v.setID(getNbVertices());
		_vertices.add(v);					// this method should change vertex id to match its index
		_edges.onVertexAdded(v.getID());	// uses directly vertex class ?
	}

	public VertexCollection<V> getVertexCollection() {
		return _vertices;
	}
	
	/** protected because no real check 
	 * (used by vertex contraction) */
	protected void setVertex(int i, Vertex<V> u) {
		_vertices.set(i,u);
	}

	/** ITERATORS */

	public Iterator<V> iterator() {
		return new VertexValueIterator(_vertices.iterator());
	}

	public Iterator<Vertex<V> > vertexIterator() {
		return _vertices.iterator();
	}

	protected VertexCollection<V> _vertices = null;


	/**
	 * Graph vertex value iterator nested class.
	 * It is used to provide a generic value iterator based on the vertex collection one.
	 * You have just to override the vertexIterator() graph method to make this one works.
	 */
	protected class VertexValueIterator implements Iterator<V> {
		
		public VertexValueIterator(Iterator<Vertex<V> > iterator) {
			_iterator = iterator;
		}

		public boolean hasNext() {
			return _iterator.hasNext();
		}

		public V next() {
			return _iterator.next().getValue();
		}

		public void remove() throws UnsupportedOperationException {
			_iterator.remove();
		}

		private Iterator<Vertex<V> > _iterator;

	}

	public class Path implements Iterable<Vertex<V> >, Iterator<Vertex<V> > {
		
		/* Constructors */
		public Path() { }
		public Path(Path p)  {
			for (int i = 0 ; i < p.length() ; i++)
				add(p.get(i));
		}
		public Path(ParentFunction<V> parentFunction, Vertex<V> begin, Vertex<V> end) {
			Vertex<V> current = end;
			while (current != begin) {
				add(0,current);
				current = parentFunction.getParent(current);
			}
			add(0,begin);
		}

		/* Collection */
		public int length() {
			return _vertices.size();
		}
		public Vertex<V> get(int id) {
			if (id < 0 || id >= length())
				return null;
			return _vertices.get(id);
		}
		public void add(int id, Vertex<V> v) {
			if (id >= length())
				id = length();
			_vertices.add(id,v);
		}
		public void add(Vertex<V> v) {
			_vertices.add(v);
		}
		public Vertex<V> remove(int id) {
			if (id < length())
				return _vertices.remove(id);
			return null;
		}
		
		/* Iterable */
		public Iterator<Vertex<V> > iterator() {
			return this;
		}

		/* Iterator */
		public boolean hasNext() {
			return _current < length();
		}
		public Vertex<V> next() throws NoSuchElementException {
			if (!hasNext())
				throw new NoSuchElementException();
			_current++;
			return _vertices.get(_current-1);
		}
		public void remove() {
			_vertices.remove(_current);
		}

		/* Members */
		protected int _current = 0;
		private ArrayList<Vertex<V> > _vertices = new ArrayList<Vertex<V> >();
	};

};

